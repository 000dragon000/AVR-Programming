/* Scale in the key of 1/1000 */

/* 
   These are wavelengths -- if you delay this long, 
   then toggle the speaker pin, you'll get approximate
   pitches.  

   This is the 16-bit version.  The pitches get less accurate
   as they get higher, but not as bad as the 8-bit one.
   
   "x" denotes sharp.
   
   Can be generated by:
     import math
     scale = ['C', 'Cx', 'D', 'Dx', 'E', 'F', 'Fx', 'G', 'Gx', 'A', 'Ax', 'B']

     def octave(baseLength):
         wavelengths = [baseLength / math.exp(x*math.log(2)/12) for x in range(0, 12)]
	 wavelengths = [int(round(x)) for x in wavelengths]
	 return( zip(scale, wavelengths) )

     for i in range(0,4):
         for note, wavelength in octave(1000 / 2**i):
	     if wavelength < 65500:
	         noteString = note + str(i)
	         print "#define  {:<5}{:>6}".format(noteString, wavelength)
*/

#define  C0     1000
#define  Cx0     944
#define  D0      891
#define  Dx0     841
#define  E0      794
#define  F0      749
#define  Fx0     707
#define  G0      667
#define  Gx0     630
#define  A0      595
#define  Ax0     561
#define  B0      530
#define  C1      500
#define  Cx1     472
#define  D1      445
#define  Dx1     420
#define  E1      397
#define  F1      375
#define  Fx1     354
#define  G1      334
#define  Gx1     315
#define  A1      297
#define  Ax1     281
#define  B1      265
#define  C2      250
#define  Cx2     236
#define  D2      223
#define  Dx2     210
#define  E2      198
#define  F2      187
#define  Fx2     177
#define  G2      167
#define  Gx2     157
#define  A2      149
#define  Ax2     140
#define  B2      132
#define  C3      125
#define  Cx3     118
#define  D3      111
#define  Dx3     105
#define  E3       99
#define  F3       94
#define  Fx3      88
#define  G3       83
#define  Gx3      79
#define  A3       74
#define  Ax3      70
#define  B3       66

